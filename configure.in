dnl Autoconfigure Script for wxMsn - autotools 1.9 required

AC_INIT(configure.in)
AM_INIT_AUTOMAKE(wxmsn, 0.01)
AM_CONFIG_HEADER(config.h)
AM_MAINTAINER_MODE

AC_ISC_POSIX
AC_PROG_CC
AM_PROG_CC_STDC
AC_HEADER_STDC

AC_PROG_CPP
AC_PROG_CXX

dnl GETTEXT_PACKAGE=wxmsn
dnl AC_SUBST(GETTEXT_PACKAGE)
dnl AC_DEFINE_UNQUOTED(GETTEXT_PACKAGE, "$GETTEXT_PACKAGE", [Package name for gettext])

dnl Languages which your application supports
dnl ALL_LINGUAS="fr/wxmsn"
dnl AM_GLIB_GNU_GETTEXT

AM_GNU_GETTEXT([external])

AM_PROG_LIBTOOL

AC_ARG_ENABLE(wxconfig26, [  --disable-wxconfig26   Disables test for wx-config2.6, useful in Cross-Compilation], disable_wxconfig26="yes", disable )
AC_ARG_ENABLE(plugins, [  --disable-plugins Disables plugins building], disable_plugins="yes", disable )

AM_OPTIONS_WXCONFIG
if test "x$disable_wxconfig26" = "x" ; then
	dnl Searchs for wx-config-2.6
	AC_PATH_PROG(WX_CONFIG_26_PATH, "wx-config-2.6", no)
	if test "$WX_CONFIG_26_PATH" != "no"; then
		WX_CONFIG_NAME=wx-config-2.6
	fi
fi

AM_PATH_WXCONFIG([2.6.0], [wxWin=1], [wxWin=0], [--unicode])

if test "$wxWin" != 1; then
	AC_MSG_ERROR([
                wxWindows must be installed on your system.

                Please check that wx-config is in path, the directory
                where wxWindows libraries are installed (returned by
                'wx-config --unicode --libs' or 
		'wx-config --unicode --static --libs' command)
                is in LD_LIBRARY_PATH or equivalent variable and
                wxWindows version is 2.6 or above with Unicode.
                ])
        else
               dnl Quick hack until wx-config does it
               ac_save_LIBS=$LIBS
               ac_save_CXXFLAGS=$CXXFLAGS
               ac_save_WX_LIBS=$WX_LIBS
	       LIBS=$WX_LIBS
               CXXFLAGS=$WX_CXXFLAGS
               AC_LANG_SAVE
               AC_LANG_CPLUSPLUS
               AC_TRY_LINK([#include <wx/wx.h>],
               [wxString test=""],
               ,[WX_LIBS=$WX_LIBS_STATIC])
               AC_LANG_RESTORE
               LIBS=$ac_save_LIBS
               CXXFLAGS=$ac_save_CXXFLAGS
	       WX_LIBS=$ac_save_WX_LIBS
	       if test x"${WX_LIBS_STATIC}" != "x"; then
	       	  AC_DEFINE_UNQUOTED(_WXSTATIC_, 1, [Is Wx Staticly Compiled])
	       fi
        fi




dnl SSL
AC_ARG_ENABLE(openssl, [  --disable-openssl Disables OpenSSL to force GnuTLS], disable_openssl="yes", disable )

dnl Checks for OpenSSL
AC_ARG_ENABLE(local-md5, [  --enable-local-md5  Uses local MD5 function instead of OpenSSL's one], use_local_md5="yes" )
				
AC_MSG_CHECKING(OpenSSL library...)

if test -z  "$disable_openssl" ; then
	saved_LIBS="$LIBS"
	saved_CFLAGS="$CFLAGS"
	
	# First just try to see if it exists in the default location
	LIBS="$saved_LIBS -lssl -lcrypto"
	CFLAGS="$saved_CFLAGS"
	AC_TRY_LINK([#include <openssl/ssl.h>],
		[SSL_accept(NULL);], have_openssl="yes")
		
	if test "x$have_openssl" = "xyes" ; then
		OPENSSL_LIBS=" -lssl -lcrypto"
		OPENSSL_CFLAGS=""
	fi
	
	LIBS="$saved_LIBS"
	CFLAGS="$saved_CFLAGS"
	
	# Otherwise, go hunting for it.
	if test "x$have_openssl" = "xyes" ; then
		for ssldir in "$with_ssl" /usr/local/ssl /usr/local/openssl; do
			if test "x$have_openssl" = "xyes"; then
				break;
			fi
		
			if test -z "$ssldir"; then
				continue;
			fi
		
			if test -f "$ssldir/include/openssl/ssl.h" && test -f "$ssldir/lib/libssl.a"; then
				CFLAGS="$saved_CFLAGS -I$ssldir/include"
				LIBS="$saved_LIBS -L$ssldir/lib -lssl -lcrypto"
				AC_TRY_LINK([#include <openssl/ssl.h>],
					[SSL_accept(NULL);], have_openssl="yes")
				OPENSSL_LIBS=" -L$ssldir/lib -lssl -lcrypto"
				OPENSSL_CFLAGS=" -I$ssldir/include"
			fi
		done
		
		LIBS="$saved_LIBS"
		CFLAGS="$saved_CFLAGS"
	fi
fi

dnl If we find OpenSSL, ok, otherwise We try to find GnuTLS
if test "x$have_openssl" = "xyes"; then
	# Great, we have OpenSSL
	AC_MSG_RESULT(yes)
	AC_DEFINE_UNQUOTED(USE_OPENSSL, 1, [We Will Use OpenSSL])
	if test -n "$use_local_md5"; then
		AC_DEFINE_UNQUOTED(USE_LOCAL_MD5, 1, [We Will Use local MD5])
	fi
	LIBS="$LIBS $OPENSSL_LIBS"
	CFLAGS="$CFLAGS $OPENSSL_CFLAGS"
else
	# Oh we don't have OpenSSL, let search for GnuTLS
	if test "x$disable_openssl" = "xyes" ; then
		AC_MSG_RESULT(disabled)
	else
		AC_MSG_RESULT(no)
	fi
	
	AM_PATH_LIBGNUTLS(1.0.4, have_gnutls="yes", have_gnutls="no")
	AC_MSG_CHECKING(GnuTLS library...)
	if test "x$have_gnutls" = "xno" ; then
		AC_MSG_RESULT(no)
		AC_MSG_ERROR([wxMsn Require SSL Support, OpenSSL either GnuTLS, see ./configure --help for specific options])
	fi
	AC_MSG_RESULT(yes)
	AC_DEFINE_UNQUOTED(USE_GNUTLS, 1, [We Will Use GnuTLS])
	LIBS="$LIBS $LIBGNUTLS_LIBS"
	CFLAGS="$CFLAGS $LIBGNUTLS_CFLAGS"
fi

dnl WX_LIBS="`$WX_CONFIG_PATH --libs`"

if test "x$disable_plugins" = "x" ; then
    PLUGINS=
    XMMS_LIBS=
    XMMS_CFLAGS=

    dnl Check XMMS/BMP/Audacious
    AC_PATH_PROG(XMMS_CONFIG_PATH, "xmms-config")
    AC_MSG_CHECKING(xmms-dev)
    if test -n "$XMMS_CONFIG_PATH" ; then
            dnl We have xmms-dev
            XMMS_LIBS=`xmms-config --libs`
            XMMS_CFLAGS=`xmms-config --cflags`
            PLUGINS="wxmsnxmms.so "
			AC_MSG_RESULT($XMMS_CONFIG_PATH)
    else
    	AC_MSG_RESULT(no)
    fi

	
    BMP_LIBS=
    BMP_CFLAGS=
    AUDACIOUS_LIBS=
    AUDACIOUS_CFLAGS=
    dnl Checks pkg-config
    PKG_PROG_PKG_CONFIG
    if test -n "$PKG_CONFIG" ; then
    	AC_MSG_CHECKING(beep-media-player pkgconfig)
    	PKG_CHECK_EXISTS("bmp", has_bmp_dev="yes", has_bmp_dev=)
	if test -n "$has_bmp_dev" ; then
            dnl We have BMP-dev
            AC_MSG_RESULT(yes)
            BMP_LIBS=`$PKG_CONFIG bmp --libs`
            BMP_CFLAGS=`$PKG_CONFIG bmp --cflags`
            PLUGINS=$PLUGINS"wxmsnbmp.so "
   	else
        	AC_MSG_RESULT(no)
    	fi
    	
	AC_MSG_CHECKING(audacious pkgconfig)
    	PKG_CHECK_EXISTS("audacious", has_audacious_dev="yes", has_audacious_dev=)
	if test -n "$has_audacious_dev" ; then
            dnl We have audacious-dev
            AC_MSG_RESULT(yes)
            AUDACIOUS_LIBS=`$PKG_CONFIG audacious --libs`
            AUDACIOUS_CFLAGS=`$PKG_CONFIG audacious --cflags`
            PLUGINS=$PLUGINS"wxmsnaudacious.so"
    	else
        	AC_MSG_RESULT(no)
    	fi
    fi
else
    AC_MSG_CHECKING(plugins)
    AC_MSG_RESULT(disabled)
fi

AC_SUBST(XMMS_LIBS)
AC_SUBST(AUDACIOUS_LIBS)
AC_SUBST(BMP_LIBS)
AC_SUBST(XMMS_CFLAGS)
AC_SUBST(AUDACIOUS_CFLAGS)
AC_SUBST(BMP_CFLAGS)
AC_SUBST(PLUGINS)

if test "x${bindir}" = 'x${exec_prefix}/bin'; then
  if test "x${exec_prefix}" = "xNONE"; then
    if test "x${prefix}" = "xNONE"; then
      bindir="${ac_default_prefix}/bin";
    else
      bindir="${prefix}/bin";
    fi
  else
    if test "x${prefix}" = "xNONE"; then
      bindir="${ac_default_prefix}/bin";
    else
      bindir="${prefix}/bin";
    fi
  fi
fi

if test "x${libdir}" = 'x${exec_prefix}/lib'; then
  if test "x${exec_prefix}" = "xNONE"; then
    if test "x${prefix}" = "xNONE"; then
      libdir="${ac_default_prefix}/lib";
    else
      libdir="${prefix}/lib";
    fi
  else
    if test "x${prefix}" = "xNONE"; then
      libdir="${ac_default_prefix}/lib";
    else
      libdir="${prefix}/lib";
    fi
  fi
fi

dnl Set PACKAGE_BIN_DIR in config.h.
if test "x${bindir}" = 'xNONE'; then
  if test "x${prefix}" = "xNONE"; then
    AC_DEFINE_UNQUOTED(PACKAGE_BIN_DIR, "${ac_default_prefix}/bin", "Package installed binaries destination")
  else
    AC_DEFINE_UNQUOTED(PACKAGE_BIN_DIR, "${prefix}/bin", "Package installed binaries destination")
  fi
else
  AC_DEFINE_UNQUOTED(PACKAGE_BIN_DIR, "${bindir}", "Package installed binaries destination")
fi

dnl Set PACKAGE_LIB_DIR in config.h.
if test "x${libdir}" = 'xNONE'; then
  if test "x${prefix}" = "xNONE"; then
    AC_DEFINE_UNQUOTED(PACKAGE_LIB_DIR, "${ac_default_prefix}/lib", "Package installed libraries destination")
  else
    AC_DEFINE_UNQUOTED(PACKAGE_LIB_DIR, "${prefix}/lib", "Package installed libraries destination")
  fi
else
  AC_DEFINE_UNQUOTED(PACKAGE_LIB_DIR, "${libdir}", "Package installed libraries destination")
fi

dnl Set PACKAGE_DATA_DIR in config.h.
if test "x${datadir}" = 'x${prefix}/share'; then
  if test "x${prefix}" = "xNONE"; then
    AC_DEFINE_UNQUOTED(PACKAGE_DATA_DIR, "${ac_default_prefix}/share/${PACKAGE}", "Package installed data destination")
    AC_DEFINE_UNQUOTED(LOCALE_DIR, "${ac_default_prefix}/share/locale", "Locale directory")
  else
    AC_DEFINE_UNQUOTED(PACKAGE_DATA_DIR, "${prefix}/share/${PACKAGE}", "Package installed data destination")
    AC_DEFINE_UNQUOTED(LOCALE_DIR, "${prefix}/share/locale", "Locale directory")
  fi
else
  AC_DEFINE_UNQUOTED(PACKAGE_DATA_DIR, "${datadir}/${PACKAGE}", "Package installed data destination")
  AC_DEFINE_UNQUOTED(LOCALE_DIR, "${datadir}/locale", "Locale directory")
fi

AC_OUTPUT([
Makefile
include/Makefile
src/Makefile
src/html/Makefile
po/Makefile.in
plugins/Makefile
plugins/xmms/Makefile
])

echo
echo "wxMsn $VERSION Build configuration"
echo "=================================="
echo "Great configure hasn't failed !"
echo
if test "x$have_openssl" = "x"; then
    have_openssl="no";
fi
echo "Using OpenSSL : $have_openssl"
if test "x$have_gnutls" = "x"; then
    have_gnutls="no"
elif test "x$have_gnutls" = "xyes"; then
    use_local_md5="yes"
fi
echo "Using GNUTls : $have_gnutls"
if test "x$use_local_md5" = "x"; then
    use_local_md5="no";
fi
echo "Building Plugins : $PLUGINS"
echo
echo "Using local MD5 function : $use_local_md5"
echo
echo "Using wxWidgets : $WX_CONFIG_PATH" 
echo "  version : " `$WX_CONFIG_PATH --version-full`
echo "  name : " `$WX_CONFIG_PATH --basename`
echo
echo "configure complete, now type 'make' and pray."

